import type { Project, Settings } from "@/hooks/use-app-state"
import { generateSEOMetadata } from "@/lib/content-analyzer"
import { SecurityUtils } from "@/lib/security-utils"

export function exportToHTML(project: Project, settings: Settings): string {
  const allContent = project.sections.map((section) => section.content.map((c) => c.value || "").join(" ")).join(" ")

  const seoData = generateSEOMetadata(project.title, allContent)

  const css = generateCSS(settings)
  const html = generateHTML(project, settings)

  return `<!DOCTYPE html>
<html lang="${seoData.language}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${seoData.title}</title>
    <meta name="description" content="${seoData.description}">
    <meta name="keywords" content="${seoData.keywords}">
    <meta name="author" content="Poster2Web">
    
     Open Graph / Facebook 
    <meta property="og:type" content="website">
    <meta property="og:title" content="${seoData.title}">
    <meta property="og:description" content="${seoData.description}">
    
     Twitter 
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:title" content="${seoData.title}">
    <meta property="twitter:description" content="${seoData.description}">
    
     Favicon 
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    
    <style>
        ${css}
    </style>
    
    ${settings.analyticsCode ? ` Analytics \n    ${settings.analyticsCode}` : ""}
</head>
<body>
    <div class="container">
        ${html}
    </div>
    
     Generated by Poster2Web 
    <script>
        console.log('Website generated by Poster2Web - https://poster2web.com');
    </script>
</body>
</html>`
}

function generateCSS(settings: Settings): string {
  return `
/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    --primary-color: ${settings.primaryColor};
    --secondary-color: ${settings.secondaryColor};
    --title-size: ${settings.titleSize}px;
    --content-size: ${settings.contentSize}px;
    --logo-size: ${settings.logoSize}px;
    --bg-color: ${settings.darkMode ? "#0a0a0a" : "#ffffff"};
    --text-color: ${settings.darkMode ? "#ffffff" : "#000000"};
    --muted-color: ${settings.darkMode ? "#666666" : "#888888"};
}

body {
    font-family: ${getFontFamily(settings.fontStyle)};
    background-color: var(--bg-color);
    color: var(--text-color);
    line-height: 1.6;
    font-size: var(--content-size);
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

/* Typography */
h1, h2, h3, h4, h5, h6 {
    color: var(--primary-color);
    margin-bottom: 1rem;
    line-height: 1.2;
}

h1 {
    font-size: var(--title-size);
    font-weight: 700;
}

h2 {
    font-size: calc(var(--title-size) * 0.8);
    font-weight: 600;
}

h3 {
    font-size: calc(var(--title-size) * 0.6);
    font-weight: 600;
}

p {
    margin-bottom: 1rem;
    color: var(--text-color);
}

a {
    color: var(--primary-color);
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
}

/* Layout */
.header {
    text-align: ${settings.headerAlignment};
    margin-bottom: 3rem;
}

.logo {
    height: var(--logo-size);
    margin-bottom: 2rem;
}

.section {
    margin-bottom: 3rem;
}

.section:last-child {
    margin-bottom: 0;
}

/* Images */
img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
}

figure {
    text-align: center;
    margin: 2rem 0;
}

figcaption {
    margin-top: 0.5rem;
    font-size: 0.9em;
    color: var(--muted-color);
    font-style: italic;
}

/* Lists */
ul, ol {
    margin-bottom: 1rem;
    padding-left: 2rem;
}

li {
    margin-bottom: 0.5rem;
}

/* Blockquotes */
blockquote {
    border-left: 4px solid var(--primary-color);
    padding-left: 1rem;
    margin: 1.5rem 0;
    font-style: italic;
    color: var(--muted-color);
}

/* Action Buttons */
.action-buttons {
    text-align: center;
    margin-top: 3rem;
}

.btn {
    display: inline-block;
    background-color: var(--primary-color);
    color: white;
    padding: 12px 24px;
    border-radius: 6px;
    font-weight: 600;
    text-decoration: none;
    margin: 0 0.5rem 1rem 0.5rem;
    transition: all 0.3s ease;
}

.btn:hover {
    background-color: var(--secondary-color);
    transform: translateY(-2px);
    text-decoration: none;
}

/* Responsive Design */
@media (max-width: 768px) {
    .container {
        padding: 1rem;
    }
    
    :root {
        --title-size: ${Math.max(24, Number.parseInt(settings.titleSize) * 0.8)}px;
        --content-size: ${Math.max(14, Number.parseInt(settings.contentSize) * 0.9)}px;
        --logo-size: ${Math.max(80, Number.parseInt(settings.logoSize) * 0.7)}px;
    }
    
    .section {
        margin-bottom: 2rem;
    }
}

@media (max-width: 480px) {
    :root {
        --title-size: ${Math.max(20, Number.parseInt(settings.titleSize) * 0.7)}px;
        --content-size: ${Math.max(13, Number.parseInt(settings.contentSize) * 0.85)}px;
        --logo-size: ${Math.max(60, Number.parseInt(settings.logoSize) * 0.6)}px;
    }
}

/* Print Styles */
@media print {
    body {
        background-color: white;
        color: black;
    }
    
    .action-buttons {
        display: none;
    }
    
    .section {
        page-break-inside: avoid;
    }
}
`
}

function generateHTML(project: Project, settings: Settings): string {
  let html = ""

  // Logo
  if (project.logoUrl) {
    html += `<div class="header">
        <img src="${project.logoUrl}" alt="${project.title} Logo" class="logo">
    </div>\n`
  }

  // Sections
  project.sections.forEach((section) => {
    const sectionClass = section.isHeader ? "header" : "section"
    html += `<div class="${sectionClass}">\n`

    section.content.forEach((content) => {
      if (content.type === "text") {
        // Sanitize any user-provided or converted Markdown HTML to prevent XSS.
        html += `    ${SecurityUtils.sanitizeHTML(content.value || "")}\n`
      } else if (content.type === "image") {
        html += `    <figure>
        <img src="${content.url}" alt="${content.caption || ""}" />
        ${content.caption ? `<figcaption>${content.caption}</figcaption>` : ""}
    </figure>\n`
      } else if (content.type === "html") {
        // Sanitize raw HTML content before inlining it.
        html += `    ${SecurityUtils.sanitizeHTML(content.value || "")}\n`
      }
    })

    html += `</div>\n\n`
  })

  // Action Buttons
  if (settings.buttons.length > 0) {
    html += `<div class="action-buttons">\n`
    settings.buttons.forEach((button) => {
      const href = button.type === "email" ? `mailto:${button.value}` : button.value
      const target = button.type === "link" ? ' target="_blank" rel="noopener noreferrer"' : ""
      html += `    <a href="${href}" class="btn"${target}>${button.label}</a>\n`
    })
    html += `</div>\n`
  }

  return html
}

function getFontFamily(fontStyle: string): string {
  switch (fontStyle) {
    case "serif":
      return 'Georgia, "Times New Roman", Times, serif'
    case "mono":
      return '"Courier New", Courier, monospace'
    default:
      return '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
  }
}
