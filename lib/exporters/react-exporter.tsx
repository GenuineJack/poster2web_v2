import type { Project, Settings } from "@/hooks/use-app-state"
import { SecurityUtils } from "@/lib/security-utils"

export function exportToReact(project: Project, settings: Settings): string {
  const componentName = toPascalCase(project.title)
  const css = generateReactCSS(settings)
  const jsx = generateReactJSX(project, settings)

  return `import React from 'react';

// Generated by Poster2Web
// Component: ${componentName}

const ${componentName} = () => {
  const styles = {
    ${css}
  };

  return (
    <div style={styles.container}>
      ${jsx}
    </div>
  );
};

export default ${componentName};

// Usage:
// import ${componentName} from './${componentName}';
// 
// function App() {
//   return <${componentName} />;
// }
`
}

function generateReactCSS(settings: Settings): string {
  return `container: {
      maxWidth: '1200px',
      margin: '0 auto',
      padding: '2rem',
      fontFamily: '${getFontFamily(settings.fontStyle)}',
      backgroundColor: '${settings.darkMode ? "#0a0a0a" : "#ffffff"}',
      color: '${settings.darkMode ? "#ffffff" : "#000000"}',
      lineHeight: '1.6',
      fontSize: '${settings.contentSize}px',
    },
    header: {
      textAlign: '${settings.headerAlignment}',
      marginBottom: '3rem',
    },
    logo: {
      height: '${settings.logoSize}px',
      marginBottom: '2rem',
    },
    section: {
      marginBottom: '3rem',
    },
    title: {
      color: '${settings.primaryColor}',
      fontSize: '${settings.titleSize}px',
      fontWeight: '700',
      marginBottom: '1rem',
      lineHeight: '1.2',
    },
    subtitle: {
      color: '${settings.primaryColor}',
      fontSize: '${Math.round(Number.parseInt(settings.titleSize) * 0.8)}px',
      fontWeight: '600',
      marginBottom: '1rem',
      lineHeight: '1.2',
    },
    text: {
      marginBottom: '1rem',
      color: '${settings.darkMode ? "#ffffff" : "#000000"}',
    },
    image: {
      maxWidth: '100%',
      height: 'auto',
      borderRadius: '8px',
    },
    figure: {
      textAlign: 'center',
      margin: '2rem 0',
    },
    figcaption: {
      marginTop: '0.5rem',
      fontSize: '0.9em',
      color: '${settings.darkMode ? "#666666" : "#888888"}',
      fontStyle: 'italic',
    },
    actionButtons: {
      textAlign: 'center',
      marginTop: '3rem',
    },
    button: {
      display: 'inline-block',
      backgroundColor: '${settings.primaryColor}',
      color: 'white',
      padding: '12px 24px',
      borderRadius: '6px',
      fontWeight: '600',
      textDecoration: 'none',
      margin: '0 0.5rem 1rem 0.5rem',
      transition: 'all 0.3s ease',
      border: 'none',
      cursor: 'pointer',
    }`
}

function generateReactJSX(project: Project, settings: Settings): string {
  let jsx = ""

  // Logo
  if (project.logoUrl) {
    jsx += `      <div style={styles.header}>
        <img src="${project.logoUrl}" alt="${project.title} Logo" style={styles.logo} />
      </div>\n`
  }

  // Sections
  project.sections.forEach((section, sectionIndex) => {
    const sectionStyle = section.isHeader ? "header" : "section"
    jsx += `      <div style={styles.${sectionStyle}}>\n`

    section.content.forEach((content, contentIndex) => {
      if (content.type === "text") {
        jsx += `        <div 
          style={styles.text}
           dangerouslySetInnerHTML={{ __html: \`${escapeBackticks(SecurityUtils.sanitizeHTML(content.value || ""))}\` }}
        />\n`
      } else if (content.type === "image") {
        jsx += `        <figure style={styles.figure}>
          <img 
            src="${content.url}" 
            alt="${content.caption || ""}" 
            style={styles.image}
          />
          ${content.caption ? `<figcaption style={styles.figcaption}>${content.caption}</figcaption>` : ""}
        </figure>\n`
      } else if (content.type === "html") {
        jsx += `        <div 
           dangerouslySetInnerHTML={{ __html: \`${escapeBackticks(SecurityUtils.sanitizeHTML(content.value || ""))}\` }}
        />\n`
      }
    })

    jsx += `      </div>\n\n`
  })

  // Action Buttons
  if (settings.buttons.length > 0) {
    jsx += `      <div style={styles.actionButtons}>\n`
    settings.buttons.forEach((button) => {
      const href = button.type === "email" ? `mailto:${button.value}` : button.value
      const target = button.type === "link" ? ' target="_blank" rel="noopener noreferrer"' : ""
      jsx += `        <a 
          href="${href}" 
          style={styles.button}${target}
        >
          ${button.label}
        </a>\n`
    })
    jsx += `      </div>\n`
  }

  return jsx
}

function toPascalCase(str: string): string {
  return str
    .replace(/[^a-zA-Z0-9]/g, " ")
    .split(" ")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join("")
}

function escapeBackticks(str: string): string {
  return str.replace(/`/g, "\\`").replace(/\${/g, "\\${")
}

function getFontFamily(fontStyle: string): string {
  switch (fontStyle) {
    case "serif":
      return 'Georgia, "Times New Roman", Times, serif'
    case "mono":
      return '"Courier New", Courier, monospace'
    default:
      return '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
  }
}
