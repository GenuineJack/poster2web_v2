import type { Project, Settings } from "@/hooks/use-app-state"
import { SecurityUtils } from "@/lib/security-utils"
import { generateSEOMetadata } from "@/lib/content-analyzer"

export function exportToNextJS(project: Project, settings: Settings): { page: string; metadata: string } {
  const allContent = project.sections.map((section) => section.content.map((c) => c.value || "").join(" ")).join(" ")

  const seoData = generateSEOMetadata(project.title, allContent)
  const componentName = toPascalCase(project.title)

  const metadata = generateMetadata(seoData, settings)
  const page = generatePage(project, settings, componentName)

  return { page, metadata }
}

function generateMetadata(seoData: any, settings: Settings): string {
  return `import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: '${seoData.title}',
  description: '${seoData.description}',
  keywords: '${seoData.keywords}',
  authors: [{ name: 'Poster2Web' }],
  creator: 'Poster2Web',
  openGraph: {
    title: '${seoData.title}',
    description: '${seoData.description}',
    type: 'website',
    locale: '${seoData.language}',
  },
  twitter: {
    card: 'summary_large_image',
    title: '${seoData.title}',
    description: '${seoData.description}',
  },
  robots: {
    index: true,
    follow: true,
  },
}
`
}

function generatePage(project: Project, settings: Settings, componentName: string): string {
  const jsx = generateNextJSX(project, settings)
  const styles = generateNextStyles(settings)

  return `'use client'

import Image from 'next/image'
import Link from 'next/link'
import { useState, useEffect } from 'react'

// Generated by Poster2Web
export default function ${componentName}Page() {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null // Prevent hydration mismatch
  }

  return (
    <div className="container">
      ${jsx}
      
      <style jsx>{\`
        ${styles}
      \`}</style>
    </div>
  )
}

// Optional: Export as a reusable component
export function ${componentName}Component() {
  return <${componentName}Page />
}
`
}

function generateNextJSX(project: Project, settings: Settings): string {
  let jsx = ""

  // Logo
  if (project.logoUrl) {
    jsx += `      <div className="header">
        <Image
          src="${project.logoUrl}"
          alt="${project.title} Logo"
          width={${settings.logoSize}}
          height={${Math.round(Number.parseInt(settings.logoSize) * 0.6)}}
          className="logo"
          priority
        />
      </div>\n`
  }

  // Sections
  project.sections.forEach((section) => {
    const sectionClass = section.isHeader ? "header" : "section"
    jsx += `      <div className="${sectionClass}">\n`

    section.content.forEach((content) => {
      if (content.type === "text") {
        jsx += `        <div 
          className="content"
           dangerouslySetInnerHTML={{ __html: \`${escapeBackticks(SecurityUtils.sanitizeHTML(content.value || ""))}\` }}
        />\n`
      } else if (content.type === "image") {
        jsx += `        <figure className="figure">
          <Image
            src="${content.url}"
            alt="${content.caption || ""}"
            width={800}
            height={600}
            className="image"
          />
          ${content.caption ? `<figcaption className="figcaption">${content.caption}</figcaption>` : ""}
        </figure>\n`
      } else if (content.type === "html") {
        jsx += `        <div 
          className="html-content"
           dangerouslySetInnerHTML={{ __html: \`${escapeBackticks(SecurityUtils.sanitizeHTML(content.value || ""))}\` }}
        />\n`
      }
    })

    jsx += `      </div>\n\n`
  })

  // Action Buttons
  if (settings.buttons.length > 0) {
    jsx += `      <div className="action-buttons">\n`
    settings.buttons.forEach((button) => {
      if (button.type === "link") {
        jsx += `        <Link 
          href="${button.value}" 
          className="btn"
          target="_blank"
          rel="noopener noreferrer"
        >
          ${button.label}
        </Link>\n`
      } else {
        const href = button.type === "email" ? `mailto:${button.value}` : button.value
        jsx += `        <a 
          href="${href}" 
          className="btn"
        >
          ${button.label}
        </a>\n`
      }
    })
    jsx += `      </div>\n`
  }

  return jsx
}

function generateNextStyles(settings: Settings): string {
  return `.container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 2rem;
          font-family: ${getFontFamily(settings.fontStyle)};
          background-color: ${settings.darkMode ? "#0a0a0a" : "#ffffff"};
          color: ${settings.darkMode ? "#ffffff" : "#000000"};
          line-height: 1.6;
          font-size: ${settings.contentSize}px;
        }

        .header {
          text-align: ${settings.headerAlignment};
          margin-bottom: 3rem;
        }

        .logo {
          margin-bottom: 2rem;
        }

        .section {
          margin-bottom: 3rem;
        }

        .content h1, .content h2, .content h3, .content h4, .content h5, .content h6 {
          color: ${settings.primaryColor};
          margin-bottom: 1rem;
          line-height: 1.2;
        }

        .content h1 {
          font-size: ${settings.titleSize}px;
          font-weight: 700;
        }

        .content h2 {
          font-size: ${Math.round(Number.parseInt(settings.titleSize) * 0.8)}px;
          font-weight: 600;
        }

        .content h3 {
          font-size: ${Math.round(Number.parseInt(settings.titleSize) * 0.6)}px;
          font-weight: 600;
        }

        .content p {
          margin-bottom: 1rem;
        }

        .content a {
          color: ${settings.primaryColor};
          text-decoration: none;
        }

        .content a:hover {
          text-decoration: underline;
        }

        .content ul, .content ol {
          margin-bottom: 1rem;
          padding-left: 2rem;
        }

        .content li {
          margin-bottom: 0.5rem;
        }

        .content blockquote {
          border-left: 4px solid ${settings.primaryColor};
          padding-left: 1rem;
          margin: 1.5rem 0;
          font-style: italic;
          color: ${settings.darkMode ? "#666666" : "#888888"};
        }

        .figure {
          text-align: center;
          margin: 2rem 0;
        }

        .image {
          max-width: 100%;
          height: auto;
          border-radius: 8px;
        }

        .figcaption {
          margin-top: 0.5rem;
          font-size: 0.9em;
          color: ${settings.darkMode ? "#666666" : "#888888"};
          font-style: italic;
        }

        .action-buttons {
          text-align: center;
          margin-top: 3rem;
        }

        .btn {
          display: inline-block;
          background-color: ${settings.primaryColor};
          color: white;
          padding: 12px 24px;
          border-radius: 6px;
          font-weight: 600;
          text-decoration: none;
          margin: 0 0.5rem 1rem 0.5rem;
          transition: all 0.3s ease;
        }

        .btn:hover {
          background-color: ${settings.secondaryColor};
          transform: translateY(-2px);
          text-decoration: none;
        }

        @media (max-width: 768px) {
          .container {
            padding: 1rem;
          }
          
          .content h1 {
            font-size: ${Math.max(24, Number.parseInt(settings.titleSize) * 0.8)}px;
          }
          
          .section {
            margin-bottom: 2rem;
          }
        }

        @media (max-width: 480px) {
          .content h1 {
            font-size: ${Math.max(20, Number.parseInt(settings.titleSize) * 0.7)}px;
          }
        }`
}

function toPascalCase(str: string): string {
  return str
    .replace(/[^a-zA-Z0-9]/g, " ")
    .split(" ")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join("")
}

function escapeBackticks(str: string): string {
  return str.replace(/`/g, "\\`").replace(/\${/g, "\\${")
}

function getFontFamily(fontStyle: string): string {
  switch (fontStyle) {
    case "serif":
      return 'Georgia, "Times New Roman", Times, serif'
    case "mono":
      return '"Courier New", Courier, monospace'
    default:
      return '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
  }
}
